name: Release and Package

on:
    push:
        tags:
            - 'v*' # Trigger on version tags

jobs:
    release:
        runs-on: ${{ matrix.os }}

        strategy:
          # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
          fail-fast: false

          matrix:
            os: [ubuntu-latest, windows-latest]
            config:
                - { configurePreset: Linux-GCC-x86_64, buildPreset: Linux-GCC-x86_64-Debug, OS: Linux, Compiler: GCC, Config: Debug}
                - { configurePreset: Linux-GCC-x86_64, buildPreset: Linux-GCC-x86_64-Release_Dev, OS: Linux, Compiler: GCC, Config: RelWithDebInfo}
                - { configurePreset: Linux-GCC-x86_64, buildPreset: Linux-GCC-x86_64-Release, OS: Linux, Compiler: GCC, Config: Release}
                - { configurePreset: Linux-Clang-x86_64, buildPreset: Linux-Clang-x86_64-Debug, OS: Linux, Compiler: Clang, Config: Debug}
                - { configurePreset: Linux-Clang-x86_64, buildPreset: Linux-Clang-x86_64-Release_Dev, OS: Linux, Compiler: Clang, Config: RelWithDebInfo}
                - { configurePreset: Linux-Clang-x86_64, buildPreset: Linux-Clang-x86_64-Release, OS: Linux, Compiler: Clang, Config: Release}
                - { configurePreset: Win-MSVC-x86_64, buildPreset: Win-MSVC-x86_64-Debug, OS: Win, Compiler: MSVC, Config: Debug}
                - { configurePreset: Win-MSVC-x86_64, buildPreset: Win-MSVC-x86_64-Release_Dev, OS: Win, Compiler: MSVC, Config: RelWithDebInfo}
                - { configurePreset: Win-MSVC-x86_64, buildPreset: Win-MSVC-x86_64-Release, OS: Win, Compiler: MSVC, Config: Release}
                - { configurePreset: Win-Clang-x86_64, buildPreset: Win-Clang-x86_64-Debug, OS: Win, Compiler: Clang, Config: Debug}
                - { configurePreset: Win-Clang-x86_64, buildPreset: Win-Clang-x86_64-Release_Dev, OS: Win, Compiler: Clang, Config: RelWithDebInfo}
                - { configurePreset: Win-Clang-x86_64, buildPreset: Win-Clang-x86_64-Release, OS: Win, Compiler: Clang, Config: Release}
            exclude:
            - os: windows-latest
              config: { configurePreset: Linux-GCC-x86_64, buildPreset: Linux-GCC-x86_64-Debug, OS: Linux, Compiler: GCC, Config: Debug}
            - os: windows-latest
              config: { configurePreset: Linux-GCC-x86_64, buildPreset: Linux-GCC-x86_64-Release_Dev, OS: Linux, Compiler: GCC, Config: RelWithDebInfo}
            - os: windows-latest
              config: { configurePreset: Linux-GCC-x86_64, buildPreset: Linux-GCC-x86_64-Release, OS: Linux, Compiler: GCC, Config: Release}
            - os: windows-latest
              config: { configurePreset: Linux-Clang-x86_64, buildPreset: Linux-Clang-x86_64-Debug, OS: Linux, Compiler: Clang, Config: Debug}
            - os: windows-latest
              config: { configurePreset: Linux-Clang-x86_64, buildPreset: Linux-Clang-x86_64-Release_Dev, OS: Linux, Compiler: Clang, Config: RelWithDebInfo}
            - os: windows-latest
              config: { configurePreset: Linux-Clang-x86_64, buildPreset: Linux-Clang-x86_64-Release, OS: Linux, Compiler: Clang, Config: Release}
            - os: ubuntu-latest
              config: { configurePreset: Win-MSVC-x86_64, buildPreset: Win-MSVC-x86_64-Debug, OS: Win, Compiler: MSVC, Config: Debug}
            - os: ubuntu-latest
              config: { configurePreset: Win-MSVC-x86_64, buildPreset: Win-MSVC-x86_64-Release_Dev, OS: Win, Compiler: MSVC, Config: RelWithDebInfo}
            - os: ubuntu-latest
              config: { configurePreset: Win-MSVC-x86_64, buildPreset: Win-MSVC-x86_64-Release, OS: Win, Compiler: MSVC, Config: Release}
            - os: ubuntu-latest
              config: { configurePreset: Win-Clang-x86_64, buildPreset: Win-Clang-x86_64-Debug, OS: Win, Compiler: Clang, Config: Debug}
            - os: ubuntu-latest
              config: { configurePreset: Win-Clang-x86_64, buildPreset: Win-Clang-x86_64-Release_Dev, OS: Win, Compiler: Clang, Config: RelWithDebInfo}
            - os: ubuntu-latest
              config: { configurePreset: Win-Clang-x86_64, buildPreset: Win-Clang-x86_64-Release, OS: Win, Compiler: Clang, Config: Release}

        steps:
          - uses: actions/checkout@v4
          - uses: ilammy/msvc-dev-cmd@v1
          
          - name: Install Ninja Multi-Config on Linux
            if: runner.os == 'Linux'
            run: >
                sudo apt-get update && sudo apt-get install ninja-build -y

          - name: Install Ninja Multi-Config on Windows
            if: runner.os == 'Windows'
            run: >
                choco install ninja

          - name: Configure CMake using Preset
            run: >
                cmake --preset ${{ matrix.config.configurePreset }}

          - name: Install using preset
            run: >
                cmake --build --preset ${{ matrix.config.buildPreset }} --target install

          - name: Build Package
            run: >
                cpack --preset ${{ matrix.config.buildPreset }}

          - name: Check if release exists
            id: check_release
            uses: actions/github-script@v4
            env:
                GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
            with:
                script: |
                  const { data: releases } = await github.repos.listReleases({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                  });
                  const release = releases.find(release => release.tag_name === context.ref.replace('refs/tags/', ''));
                  const releaseExists = release ? 'true' : 'false';
                  const releaseUrl = release ? release.html_url : '';
                  const uploadUrl = release ? release.upload_url : '';
            
                  // Setting outputs explicitly
                  core.setOutput('release_exists', releaseExists);
                  core.setOutput('release_url', releaseUrl);
                  core.setOutput('upload_url', uploadUrl);
            
                  console.log(`Release exists: ${releaseExists}`);
                  console.log(`Release URL: ${releaseUrl}`);
                  console.log(`Upload URL: ${uploadUrl}`);
    
          - name: Debug Check Release Outputs
            run: |
              echo "Release exists: ${{ steps.check_release.outputs.release_exists }}"
              echo "Release URL: ${{ steps.check_release.outputs.release_url }}"
              echo "Upload URL: ${{ steps.check_release.outputs.upload_url }}"
    
          - name: Create Release
            id: create_release
            if: steps.check_release.outputs.release_exists == 'false'
            uses: actions/create-release@v1
            env:
              GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
            with:
              tag_name: ${{ github.ref }}
              release_name: Release ${{ github.ref }}
    
          - name: Get Upload URL from Created Release
            id: get_upload_url
            if: steps.check_release.outputs.release_exists == 'false'
            uses: actions/github-script@v4
            env:
              GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
            with:
              script: |
                const { data: release } = await github.repos.getReleaseByTag({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  tag: context.ref.replace('refs/tags/', ''),
                });
                console.log(`Upload URL from created release: ${release.upload_url}`);
                return { upload_url: release.upload_url };
              result-encoding: string
    
          - name: Debug Get Upload URL Outputs
            if: steps.check_release.outputs.release_exists == 'false'
            run: echo "Upload URL from created release:${{ steps.get_upload_url.outputs.upload_url }}"
    
          - name: Set Upload URL
            id: set_upload_url
            run: echo "UPLOAD_URL=${{ steps.check_release.outputs.upload_url || steps.get_upload_url.outputs.upload_url }}" >> $GITHUB_ENV
    
          - name: Debug Set Upload URL
            run: echo "UPLOAD_URL=${{ env.UPLOAD_URL }}"

          - name: Find the ZIP file
            id: find_zip
            run: |
                PACKAGE_PATH=$(find ./package/${{ matrix.config.OS }}/x86_64/${{ matrix.config.Compiler }}/${{ matrix.config.Config }} -name "*.zip" -print -quit)
                echo "PACKAGE_PATH=${PACKAGE_PATH}" >> $GITHUB_ENV
            shell: bash
    
          - name: Create Release Asset
            id: upload-release-asset
            uses: actions/upload-release-asset@v1
            env:
              GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
            with:
              upload_url: ${{ env.UPLOAD_URL }}
              asset_path: ${{ env.PACKAGE_PATH }}
              asset_name: ${{ matrix.config.OS }}-${{ matrix.config.Compiler }}-${{ matrix.config.Config }}.zip
              asset_content_type: application/zip
                    
                
              
