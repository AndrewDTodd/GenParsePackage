name: Release and Package

on:
    push:
        tags:
            - 'v*' # Trigger on version tags

jobs:
    release:
        runs-on: ${{ matrix.os }}

        strategy:
          # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
          fail-fast: false

          matrix:
            os: [ubuntu-latest, windows-latest]
            config:
                - { configurePreset: Linux-GCC-x86_64, buildPreset: Linux-GCC-x86_64-Debug, OS: Linux, Compiler: GCC, Config: Debug}
                - { configurePreset: Linux-GCC-x86_64, buildPreset: Linux-GCC-x86_64-Release_Dev, OS: Linux, Compiler: GCC, Config: RelWithDebInfo}
                - { configurePreset: Linux-GCC-x86_64, buildPreset: Linux-GCC-x86_64-Release, OS: Linux, Compiler: GCC, Config: Release}
                - { configurePreset: Linux-Clang-x86_64, buildPreset: Linux-Clang-x86_64-Debug, OS: Linux, Compiler: Clang, Config: Debug}
                - { configurePreset: Linux-Clang-x86_64, buildPreset: Linux-Clang-x86_64-Release_Dev, OS: Linux, Compiler: Clang, Config: RelWithDebInfo}
                - { configurePreset: Linux-Clang-x86_64, buildPreset: Linux-Clang-x86_64-Release, OS: Linux, Compiler: Clang, Config: Release}
                - { configurePreset: Win-MSVC-x86_64, buildPreset: Win-MSVC-x86_64-Debug, OS: Win, Compiler: MSVC, Config: Debug}
                - { configurePreset: Win-MSVC-x86_64, buildPreset: Win-MSVC-x86_64-Release_Dev, OS: Win, Compiler: MSVC, Config: RelWithDebInfo}
                - { configurePreset: Win-MSVC-x86_64, buildPreset: Win-MSVC-x86_64-Release, OS: Win, Compiler: MSVC, Config: Release}
                - { configurePreset: Win-Clang-x86_64, buildPreset: Win-Clang-x86_64-Debug, OS: Win, Compiler: Clang, Config: Debug}
                - { configurePreset: Win-Clang-x86_64, buildPreset: Win-Clang-x86_64-Release_Dev, OS: Win, Compiler: Clang, Config: RelWithDebInfo}
                - { configurePreset: Win-Clang-x86_64, buildPreset: Win-Clang-x86_64-Release, OS: Win, Compiler: Clang, Config: Release}
            exclude:
            - os: windows-latest
              config: { configurePreset: Linux-GCC-x86_64, buildPreset: Linux-GCC-x86_64-Debug, OS: Linux, Compiler: GCC, Config: Debug}
            - os: windows-latest
              config: { configurePreset: Linux-GCC-x86_64, buildPreset: Linux-GCC-x86_64-Release_Dev, OS: Linux, Compiler: GCC, Config: RelWithDebInfo}
            - os: windows-latest
              config: { configurePreset: Linux-GCC-x86_64, buildPreset: Linux-GCC-x86_64-Release, OS: Linux, Compiler: GCC, Config: Release}
            - os: windows-latest
              config: { configurePreset: Linux-Clang-x86_64, buildPreset: Linux-Clang-x86_64-Debug, OS: Linux, Compiler: Clang, Config: Debug}
            - os: windows-latest
              config: { configurePreset: Linux-Clang-x86_64, buildPreset: Linux-Clang-x86_64-Release_Dev, OS: Linux, Compiler: Clang, Config: RelWithDebInfo}
            - os: windows-latest
              config: { configurePreset: Linux-Clang-x86_64, buildPreset: Linux-Clang-x86_64-Release, OS: Linux, Compiler: Clang, Config: Release}
            - os: ubuntu-latest
              config: { configurePreset: Win-MSVC-x86_64, buildPreset: Win-MSVC-x86_64-Debug, OS: Win, Compiler: MSVC, Config: Debug}
            - os: ubuntu-latest
              config: { configurePreset: Win-MSVC-x86_64, buildPreset: Win-MSVC-x86_64-Release_Dev, OS: Win, Compiler: MSVC, Config: RelWithDebInfo}
            - os: ubuntu-latest
              config: { configurePreset: Win-MSVC-x86_64, buildPreset: Win-MSVC-x86_64-Release, OS: Win, Compiler: MSVC, Config: Release}
            - os: ubuntu-latest
              config: { configurePreset: Win-Clang-x86_64, buildPreset: Win-Clang-x86_64-Debug, OS: Win, Compiler: Clang, Config: Debug}
            - os: ubuntu-latest
              config: { configurePreset: Win-Clang-x86_64, buildPreset: Win-Clang-x86_64-Release_Dev, OS: Win, Compiler: Clang, Config: RelWithDebInfo}
            - os: ubuntu-latest
              config: { configurePreset: Win-Clang-x86_64, buildPreset: Win-Clang-x86_64-Release, OS: Win, Compiler: Clang, Config: Release}

        steps:
          - name: Checkout code
            uses: actions/checkout@v4
  
          - name: Install Ninja Multi-Config on Linux
            if: runner.os == 'Linux'
            run: >
                sudo apt-get update && sudo apt-get install ninja-build -y

          - name: Install Ninja Multi-Config on Windows
            if: runner.os == 'Windows'
            run: >
                choco install ninja

          - name: Configure CMake using Preset
            run: >
                cmake --preset ${{ matrix.config.configurePreset }}

          - name: Install using preset
            run: >
                cmake --build --preset ${{ matrix.config.buildPreset }} --target install

          - name: Build Package
            run: >
                cpack --preset ${{ matrix.config.buildPreset }}

          - name: Check if release exists
            id: check_release
            uses: actions/github-script@v4
            env:
              GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
            with:
              script: |
                const { data: releases } = await github.repos.listReleases({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                });
                const release = releases.find(release => release.tag_name === context.ref);
                return { release_exists: release ? 'true' : 'false', release_url: release ? release.html_url : '' };
              result-encoding: string

          - name: Create Release
            id: create_release
            if: steps.check_release.outputs.release_exists == 'false'
            uses: actions/create-release@v1
            env:
              GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
            with:
              tag_name: ${{ github.ref }}
              release_name: Release ${{ github.ref }}
    
          - name: Set release URL
            if: steps.check_release.outputs.release_exists == 'true'
            run: echo "RELEASE_URL=${{ steps.check_release.outputs.release_url }}" >> $GITHUB_ENV

          - name: Create Release Asset
            id: upload-release-asset
            uses: actions/upload-release-asset@v1
            env:
                GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
            with:
                upload_url: ${{ steps.set_upload_url.outputs.upload_url }}
                asset_path: ./packages/${{ matrix.config.OS }}/x86_64/${{ matrix.config.Compiler }}/${{ matrix.config.Config }}/*.zip
                asset_name: ${{ matrix.config.OS }}-${{ matrix.config.Compiler }}-${{ matrix.config.Config }}
                asset_content_type: application/zip
                    
                
              
